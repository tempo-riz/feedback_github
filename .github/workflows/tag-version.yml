name: Tag new version
on:
  push:
    branches: [main]

jobs:
  tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1

      # Fetch dependencies
      - run: dart pub get

      # Get current version from pubspec.yaml
      - name: Get version from pubspec.yaml
        id: get_version
        run: |
          version=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          echo "version=$version" >> $GITHUB_OUTPUT

      # Check if version changed compared to latest tag
      - name: Check if version changed
        id: version_check
        run: |
          latest_tag=$(git describe --tags --abbrev=0 || echo "")
          echo "Latest tag: $latest_tag"
          echo "Current version: v${{ steps.get_version.outputs.version }}"
          if [ "$latest_tag" = "v${{ steps.get_version.outputs.version }}" ]; then
            echo "Version has not changed, exiting workflow successfully."
            exit 0
          fi
          echo "Version changed, continuing workflow."

      # Dry-run publish (exit workflow successfully if fails)
      - name: Dry-run publish
        run: |
          if ! dart pub publish --dry-run; then
            echo "⚠️ Dry-run failed, exiting workflow successfully."
            exit 0
          fi

      # Install pana for scoring
      - name: Install pana
        run: dart pub global activate pana

      # Analyze package with pana
      - name: Analyze package with pana
        id: pana
        run: |
          export PATH="$PATH":"$HOME/.pub-cache/bin"
          pana --json . > result.json
          granted=$(jq '.scores.grantedPoints' result.json)
          derived=$(jq '.scores.derivedPoints' result.json)
          total=$((granted + derived))
          echo "granted=$granted" >> $GITHUB_OUTPUT
          echo "derived=$derived" >> $GITHUB_OUTPUT
          echo "score=$total" >> $GITHUB_OUTPUT
          echo "Package score: $total (granted: $granted, derived: $derived)"

      # Fail if score is not 160
      - name: Fail if score is not 160
        run: |
          if [ "${{ steps.pana.outputs.score }}" -ne 160 ]; then
            echo "❌ Package score is ${{ steps.pana.outputs.score }} (granted: ${{ steps.pana.outputs.granted }}, derived: ${{ steps.pana.outputs.derived }}). Must be 160 to tag."
            exit 1
          fi

      # Create and push tag
      - name: Create tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}
